statements   : NEXTLINE* expr (NEXTLINE+ expr)* NEXTLINE*


expr         : KEYWORDS:SET IDENTIFIER EQ expr 
             : comp-expr ((KEYWORD:OR|KEYWORD:AND) comp-expr)*

comp-expr    : NOT comp-expr 
             : arith-expr ((LT|GT|EE|NE|LTE|GTE) arith-expr)*

arith-expr   : term ((PLUS|MINUS) term)*

term         : factor ((MUL|DIV) factor)*


factor       : (PLUS|MINUS) factor
             : power  

power        : call (POW factor)*

call         : atom (LPAREN (expr (COMMA expr)*)? RPAREN )?

atom         : INT|FLOAT|STRING|IDENTIFIER
             : LPAREN expr RPAREN
             : list-expr
             : if-expr
             : for-expr
             : while-expr
             : func-def

list-expr    : LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr      : KEYWORDS:IF expr KEYWORDS:THEN 
               (expr elif-expr|else-expr?)
               | (NEXTLINE* statements KEYWORDS:END|elif-expr|else-expr)

elif-expr    : KEYWORDS:ELIF expr KEYWORDS:THEN 
               (expr elif-expr|else-expr?)
               | (NEXTLINE* statements KEYWORDS:END|elif-expr|else-expr)

else-expr    : KEYWORDS:ELSE  
               (expr) | (NEXTLINE* statements KEYWORDS:END) 

  
for-expr     : KEYWORDS:FOR IDENTIFIER EQ expr KEYWORDS:TO expr 
               (KEYWORDS:WITH KEYWORDS:STEP expr)? KEYWORDS:DO 
               (expr) | (NEXTLINE* statements KEYWORDS:END) 


while-expr   : KEYWORDS:WHILE expr KEYWORDS:DO 
               (expr) | (NEXTLINE* statements KEYWORDS:END) 


func-def     : KEYWORDS:FUNCTION IDENTIFIER? 
               LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN  
               (ARROW expr) | (NEXTLINE* statements KEYWORDS:END) 